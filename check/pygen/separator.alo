module pygen

import nodes
import reflect
import re


-- Extract and convert whitespace/comments before/after a node.


const SepMap = Map(
  VarDef : ['visibility', 'type'],
  FuncDef : ['visibility', 'defTok'],
  TypeDef : ['visibility', 'type'],
  WhileStmt : ['whileTok'],
  RepeatStmt : ['repeatTok'],
  BreakStmt : ['breakTok'],
  ForStmt : ['forTok'],
  IfStmt : ['ifTok'],
  ReturnStmt : ['returnTok'],  
  SwitchStmt : ['switchTok'],
  ForStmt : ['forTok'],
  TryFinallyStmt : ['tryTok'],
  TryExceptStmt : ['tryTok'],
  RaiseStmt : ['raiseTok'],
  
  NameExpr : ['components'],
  NameLvalue : ['lparens', 'base.components'],
  
  ) as Map<Type, Array<Str>>


def GetSeparator(o)
  if o.repr == nil
    return ''
  end
  var toks = []
  for member in SepMap.get(TypeOf(o), [])
    var t = GetMembers(o.repr, member)
    if t is Array
      if t != []
        toks.append(t[0])
      end
    else
      toks.append(t)
    end
  end
  return GetSep(toks)
end


def GetMembers(o, ms)
  for m in ms.split('.')
    o = GetMember(o, m)
  end
  return o
end


private def GetSep(toks)
  for t in toks
    if t.str != ''
      return Process(t.pre)
    end
  end
  return ''
end


private def Process(pre)
  pre = Subst(pre, '--([^\n\r]*)', '#\1')
  pre = Subst(pre, '^ +', '')
  pre = Subst(pre, ' +([\n#])', '\1')
  pre = Subst(pre, ' +$', '')
  return pre
end


const AfterCommentMap = Map(
  VarDef : 'br',
  FuncDef : 'defBr',
  TypeDef : 'headerBr',
  AssignmentStmt : 'br',
  OperatorAssignmentStmt : 'br',
  ExpressionStmt : 'br')

  
def GetAfterComment(o)
  var m = AfterCommentMap.get(TypeOf(o), nil)
  if o.repr == nil or m == nil
    return ''
  end
  var cc = GetMember(o.repr, m).pre
  cc = cc.replace('--', '#')
  return cc
end