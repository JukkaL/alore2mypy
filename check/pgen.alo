import io, os
import analyse, errors
import pygen


def IncludeInOutput(tree)
  return (tree.header == nil or not tree.header.id in ["std", "encodings"]) and
         not "-skip." in tree.path
end


def Main(args)
  var isCheck = True
  var out = "out"
  
  if args[0] == "--no-check"
    isCheck = False
    args = args[1:]
  end
  
  if args[0] == "--out"
    out = args[1]
    args = args[2:]
  end

  if args.length() < 1
    WriteLn("Usage: pgen.alo [--no-check] [--out DIR] PROGRAM")
    WriteLn()
    WriteLn("Translate PROGRAM from Alore to mypy. Generate output files in directory")
    WriteLn("DIR (default out).")
    Exit(1)
  end
  
  try
    var src = File(args[0]).read()
    -- Parse and analyse the program.
    var trees, symtable, types, typemap = Analyse(src, args[0], True, "", 
                                                  isCheck)
    var map, memberMap = BuildRenameMaps(trees)
    var r = PythonRenamer()
    r.update(map, memberMap)
    for t in trees
      if IncludeInOutput(t)
        -- Output a file. Omit std module and files with -skip suffix.
        GenerateFile(out, t, typemap, r)
      end
    end
  except e is CompileError
    -- Semantic analysis failed.
    for s in e.messages
      WriteLn(s)
    end
  end
end


def GenerateFile(outputDir, fileNode, typeMap, renamer)
  var v = PythonGeneratorVisitor(renamer, typeMap)
  fileNode.accept(v)
  
  var mpath = ''
  if fileNode.modId() != nil
    mpath = fileNode.modId().replace('::', PathSeparator)
  end
  
  var mdir = outputDir
  if mpath != ''
    mdir = Join(outputDir, mpath)
  end
  MakeDirs(mdir)
  
  var p = Join(outputDir, mpath, BaseName(fileNode.path))
  p = p.replace('.alo', '.py')
  WriteLn(fileNode.path, ' -> ', p)
  var f = File(p, Output)
  var s = v.output()
  f.write(s)
  f.close()
end
